{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAgBaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KClBDI,G,MAAO,SAAAC,GAAK,OACrB,sBAAKJ,UAAY,iBAAjB,UACI,qBAAKK,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACtB,mCAAMJ,EAAMG,QAAQE,KAApB,OACA,4BAAKL,EAAMG,QAAQG,aCHdC,G,MAAW,SAAAP,GAAK,OACzB,qBAAKJ,UAAY,YAAjB,SACMI,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCwClBM,G,wDApCb,aAAc,IAAD,8BAEX,gBAcFf,aAAe,SAAAgB,GACb,EAAKC,SAAS,CAAEC,YAAYF,EAAEG,OAAOC,SAdrC,EAAKC,MAAQ,CACXR,SAAW,GACXK,YAAc,IALL,E,qDASb,WAAoB,IAAD,OAEjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACJ,SAAWa,S,oBAO7C,WAAU,IAAD,EACyBC,KAAKN,MAA9BR,EADA,EACAA,SAAUK,EADV,EACUA,YACXU,EAAmBf,EAASgB,QAAO,SAAArB,GAAO,OAAIA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYY,kBACpG,OACE,sBAAK7B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEF,YAAc,kBACdC,aAAgB2B,KAAK3B,eAEvB,cAAC,EAAD,CAAUa,SAAUe,W,GA/BVI,cCEHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c58cb4cb.chunk.js","sourcesContent":["// import React from \"react\"\r\n// import \"./seach-box.styles.css\"\r\n\r\n// export const SeachBox = ({ placeholder, handleChange }) => (\r\n//     <input \r\n//     className = \"search\"\r\n//     type = \"search\" \r\n//     placeholder = {placeholder} \r\n//     onChange = {handleChange}\r\n//     />\r\n// );\r\n\r\n  \r\nimport React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);","import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className = 'card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h2> {props.monster.name} </h2>\r\n        <p>{ props.monster.email }</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = props => (\r\n    <div className = 'card-list'>\r\n         {props.monsters.map(monster => (\r\n            <Card key = {monster.id} monster = {monster}/>\r\n          ))}\r\n    </div>\r\n);","import React, { Component } from 'react';\nimport { SearchBox } from './components/search-box/search-box.component'\nimport { CardList } from './components/card-list/card-list.component'\nimport './App.css';\n\n//className is used to denote HTML class\n//class is creating class\n//{} inside is a javascript expression\n//whenever state gets updated(onClick) render is called again, called re-rendering\n\nclass App extends Component {\n  constructor(){\n    //calls constructor method on component class\n    super();\n    this.state = {\n      monsters : [],\n      searchField : ''\n    }\n  }\n\n  componentDidMount(){\n    //fetching from this url\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())  //converting response to json format with javascript can understand\n      .then(users => this.setState({monsters : users}) )  //taking the users from respone and set monsters to that array\n  }\n\n  handleChange = e => {\n    this.setState({ searchField:e.target.value })\n  }\n\n  render() {\n    const {monsters, searchField} = this.state\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monsters Roldex</h1>\n        <SearchBox\n          placeholder = 'search monsters'\n          handleChange = {this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}